
## Similar research

Fully pipelined DES on FPGA
- https://www.cl.cam.ac.uk/~rnc1/descrack/DEScracker.html


Ajout d'instruction pour RISC-V

- https://quasilyte.github.io/blog/post/riscv32-custom-instruction-and-its-simulation/

## Tools

Simulateur

- Spike https://github.com/riscv/riscv-isa-sim



## Generating the rocket core (tested on debian sid 27-01-2018)
Steps


1. Install riscv-tools

https://github.com/riscv/riscv-tools/blob/master/README.md

    #Setup directory
    mkdir riskv_proj
    cd riskv_proj
    export TOP=$(pwd)
    
    #Clone the git repo
    git clone https://github.com/riscv/riscv-tools.git
    cd $TOP/riscv-tools
    git submodule update --init --recursive
    
    # Install required tools
    sudo apt install autoconf automake autotools-dev curl device-tree-compiler libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev
    
    #Start the build
    export RISCV=$TOP/riscv
    export PATH=$PATH:$RISCV/bin
    ./build.sh
    
    #Test the toolchain
    cd $TOP
    echo -e '#include <stdio.h>\n int main(void) { printf("Hello world!\\n"); return 0; }' > hello.c
    riscv64-unknown-elf-gcc -o hello hello.c
    spike pk hello
    
    #Should see "hello world"
    
    
Takes roughly 1h30 on a 7th gen i5 laptop

2. Rocket chip generator

https://github.com/freechipsproject/rocket-chip#how

    #JDE _and_ JDE are required, even if the README only mentions JDE
    sudo apt install default-jre default-jdk
    
    #Install rocket chip generator
    cd $TOP
    git clone https://github.com/ucb-bar/rocket-chip.git
    cd rocket-chip
    export ROCKETCHIP=`pwd`
    git submodule update --init
    cd riscv-tools
    git submodule update --init --recursive riscv-tests

    #Generate verilog for FPGA
    cd $ROCKETCHIP/vsim
    make verilog CONFIG=DefaultFPGAConfig

    
3. Rocket chip for FPGA

https://github.com/ucb-bar/fpga-zynq#bitstream

    cd $TOP
    git clone https://github.com/ucb-bar/fpga-zynq.git
    cd fpga-zynq/zedboard
    make init-submodules
    export ROCKET_DIR=$ROCKETCHIP
    
    
    #Build verilog
    make rocket
     
    #Erreur, remplacer les lignes CXXFLAGS et LDFLAGS dans Makefile
    CXXFLAGS := $(CXXFLAGS) -O1 -std=c++11 -I$(RISCV)/include -I$(base_dir)/rocket-chip/riscv/include -D__STDC_FORMAT_MACROS
    LDFLAGS := $(LDFLAGS) -L$(RISCV)/lib -Wl,-rpath,$(RISCV)/lib -L$(sim_dir) -L$(base_dir)/rocket-chip/riscv/lib -lfesvr -lpthread
    

    
4. Files to modify for RoCC    
rocket-chip/src/main/scala/coreplex/Configs.scala 
rocket-chip/src/main/scala/tile/LazyRoCC.scala 

Conf de parametres du proc
rocket-chip/src/main/scala/tile/RocketTile.scala


5.
LazyRoCC

class  testOli(implicit p: Parameters) extends LazyRoCC {
  override lazy val module = new testOliModule(this)
}
class testOliModule(outer: testOli)(implicit p: Parameters) extends LazyRoCCModule(outer)
with HasCoreParameters {
    //val cmd = Queue(io.cmd)
    
    val s_idle :: s_ptw_req :: s_ptw_resp :: s_resp :: Nil = Enum(Bits(), 4)
    val state = Reg(init = s_idle)

    io.cmd.ready := (state === s_idle)
  
     io.resp.bits.rd := io.cmd.bits.rs1 + io.cmd.bits.rs2
}
    
6.

class WithRoccExample extends Config((site, here, up) => {
  case RocketTilesKey => up(RocketTilesKey, site) map { r =>
    r.copy(rocc =
      Seq(
        RoCCParams(
          opcodes = OpcodeSet.custom0,
          generator = (p: Parameters) => {
            val accumulator = LazyModule(new AccumulatorExample()(p))
            accumulator}),
        RoCCParams(
          opcodes = OpcodeSet.custom1,
          generator = (p: Parameters) => {
            val translator = LazyModule(new TranslatorExample()(p))
            translator},
          nPTWPorts = 1),
        RoCCParams(
          opcodes = OpcodeSet.custom2,
          generator = (p: Parameters) => {
            val counter = LazyModule(new CharacterCountExample()(p))
            counter
          }),
        RoCCParams(
          opcodes = OpcodeSet.custom3,
          generator = (p: Parameters) => {
            val testVal = LazyModule(new testOli()(p))
            testVal
          })
        ))
    }
})

7.
semi-working rocc
class  testOli(implicit p: Parameters) extends LazyRoCC {
  override lazy val module = new testOliModule(this)
}
class testOliModule(outer: testOli)(implicit p: Parameters) extends LazyRoCCModule(outer)
with HasCoreParameters {
    //val cmd = Reg(io.cmd)
    
    val s_idle :: s_ptw_req :: s_ptw_resp :: s_resp :: Nil = Enum(Bits(), 4)
    val state = Reg(init = s_idle)
    val req_rd = Reg(io.resp.bits.rd)
    
    io.cmd.ready := (state === s_idle)
    io.resp.valid := (state === s_resp)
    
    when (io.cmd.fire()) {
        req_rd := io.cmd.bits.inst.rd
        //req_addr := io.cmd.bits.rs1
        state := s_resp    
    }
    
    when (io.resp.fire()){
        state := s_idle
    }
    
    io.resp.bits.rd := req_rd
    io.resp.bits.data := io.cmd.bits.rs1// & io.cmd.bits.rs2//a + b
    io.busy := (state =/= s_idle)
    io.interrupt := Bool(false)
    io.mem.req.valid := Bool(false)
}
